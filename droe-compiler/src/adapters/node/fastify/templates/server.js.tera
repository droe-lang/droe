import fastify from 'fastify';
import cors from '@fastify/cors';
import helmet from '@fastify/helmet';
{% if has_database_ops %}
import { PrismaClient } from '@prisma/client';
{% endif %}

// Import route handlers
{% for endpoint in serve_endpoints %}
import { {{ endpoint.handler_name }} } from './handlers/{{ endpoint.handler_name }}.js';
{% endfor %}
{% if data_structures %}
{% for name, data_def in data_structures %}
import { {{ name | lower }}Routes } from './routes/{{ name | lower }}.js';
{% endfor %}
{% endif %}

const server = fastify({
  logger: {
    level: 'info',
    prettyPrint: true
  }
});

{% if has_database_ops %}
// Initialize Prisma Client
const prisma = new PrismaClient();

// Add prisma to fastify instance
server.decorate('prisma', prisma);

// Handle graceful shutdown
server.addHook('onClose', async (instance) => {
  await instance.prisma.$disconnect();
});
{% endif %}

// Register plugins
await server.register(cors, {
  origin: true,
  credentials: true
});

await server.register(helmet);

// Health check endpoint
server.get('/health', async (request, reply) => {
  return { status: 'ok', timestamp: new Date().toISOString() };
});

{% if data_structures %}
// Auto-generated CRUD routes
{% for name, data_def in data_structures %}
await server.register({{ name | lower }}Routes, { prefix: '/api/{{ name | lower }}s' });
{% endfor %}
{% endif %}

{% for endpoint in serve_endpoints %}
// {{ endpoint.method | upper }} {{ endpoint.endpoint }}
server.{{ endpoint.method | lower }}('{{ endpoint.endpoint }}', {{ endpoint.handler_name }});
{% endfor %}

// Start server
const start = async () => {
  try {
    const port = process.env.PORT || 3000;
    const host = process.env.HOST || '0.0.0.0';
    
    await server.listen({ port, host });
    console.log(`ðŸš€ Server running at http://${host}:${port}`);
  } catch (err) {
    server.log.error(err);
    process.exit(1);
  }
};

start();