{% for endpoint in serve_endpoints %}
// Handler for {{ endpoint.method.upper() }} {{ endpoint.endpoint }}
export async function {{ endpoint.handler_name }}(request, reply) {
  const { prisma } = request.server;
  
  try {
    {% if endpoint.params %}
    const { {% for param in endpoint.params %}{{ param }}{% if not loop.last %}, {% endif %}{% endfor %} } = request.params;
    {% endif %}
    {% if endpoint.accept_type %}
    const payload = request.body;
    {% endif %}
    
    // Handler implementation
    {% if endpoint.response_action %}
    // Call action and return response
    {% endif %}
    
    return { 
      message: "{{ endpoint.method.upper() }} {{ endpoint.endpoint }} endpoint", 
      timestamp: new Date().toISOString()
    };
  } catch (error) {
    reply.status(500);
    return { error: 'Internal server error' };
  }
}

{% endfor %}