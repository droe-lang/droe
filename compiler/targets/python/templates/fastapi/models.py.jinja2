from pydantic import BaseModel
from typing import Optional
from datetime import datetime
from uuid import UUID
{% if has_database_ops %}
from sqlalchemy import Column, String, Integer, Float, Boolean, DateTime, Text
from sqlalchemy.dialects.postgresql import UUID as PGUUID
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
import uuid

Base = declarative_base()
{% endif %}

{% for name, data_def in data_structures.items() %}
{% if has_database_ops %}
# SQLAlchemy model for database
class {{ name }}DB(Base):
    __tablename__ = "{{ name | snake_case }}s"
    
{% for field in data_def.fields %}
    {% if 'key' in field.annotations and 'auto' in field.annotations %}
    {{ field.name | snake_case }} = Column(PGUUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    {% elif field.type == 'text' %}
    {{ field.name | snake_case }} = Column({% if 'required' in field.annotations %}String(255), nullable=False{% else %}String(255){% endif %})
    {% elif field.type == 'int' %}
    {{ field.name | snake_case }} = Column({% if 'required' in field.annotations %}Integer, nullable=False{% else %}Integer{% endif %})
    {% elif field.type == 'decimal' %}
    {{ field.name | snake_case }} = Column({% if 'required' in field.annotations %}Float, nullable=False{% else %}Float{% endif %})
    {% elif field.type == 'flag' %}
    {{ field.name | snake_case }} = Column({% if 'required' in field.annotations %}Boolean, nullable=False{% else %}Boolean{% endif %})
    {% elif field.type in ['date', 'datetime'] %}
    {{ field.name | snake_case }} = Column({% if 'auto' in field.annotations %}DateTime(timezone=True), server_default=func.now(){% elif 'required' in field.annotations %}DateTime(timezone=True), nullable=False{% else %}DateTime(timezone=True){% endif %})
    {% endif %}
{% endfor %}
{% endif %}

# Pydantic model for API
class {{ name }}(BaseModel):
{% for field in data_def.fields %}
    {% if 'key' in field.annotations and 'auto' in field.annotations %}
    {{ field.name | snake_case }}: {% if 'optional' in field.annotations %}Optional[UUID]{% else %}UUID{% endif %} = None
    {% elif field.type == 'text' %}
    {{ field.name | snake_case }}: {% if 'optional' in field.annotations %}Optional[str]{% else %}str{% endif %}
    {% elif field.type == 'int' %}
    {{ field.name | snake_case }}: {% if 'optional' in field.annotations %}Optional[int]{% else %}int{% endif %}
    {% elif field.type == 'decimal' %}
    {{ field.name | snake_case }}: {% if 'optional' in field.annotations %}Optional[float]{% else %}float{% endif %}
    {% elif field.type == 'flag' %}
    {{ field.name | snake_case }}: {% if 'optional' in field.annotations %}Optional[bool]{% else %}bool{% endif %}
    {% elif field.type in ['date', 'datetime'] %}
    {{ field.name | snake_case }}: {% if 'optional' in field.annotations %}Optional[datetime]{% else %}datetime{% endif %}{% if 'auto' in field.annotations %} = None{% endif %}
    {% endif %}
{% endfor %}

{% if has_database_ops %}
    class Config:
        from_attributes = True
{% endif %}

class {{ name }}Create(BaseModel):
{% for field in data_def.fields %}
    {% if 'key' in field.annotations and 'auto' in field.annotations %}
    # Auto-generated field, not included in create
    {% elif 'auto' in field.annotations %}
    # Auto-generated field, not included in create
    {% else %}
    {{ field.name | snake_case }}: {% if 'optional' in field.annotations %}Optional[{{ field.type | python_type }}]{% else %}{{ field.type | python_type }}{% endif %}
    {% endif %}
{% endfor %}

class {{ name }}Update(BaseModel):
{% for field in data_def.fields %}
    {% if 'key' in field.annotations and 'auto' in field.annotations %}
    # Primary key, not included in update
    {% else %}
    {{ field.name | snake_case }}: Optional[{{ field.type | python_type }}] = None
    {% endif %}
{% endfor %}

{% endfor %}