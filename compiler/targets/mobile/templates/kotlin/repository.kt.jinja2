package {{ package_name }}.repository

import {{ package_name }}.network.ApiService
import {{ package_name }}.models.*
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class ApiRepository @Inject constructor(
    private val apiService: ApiService
) {
    {% for api_call in api_calls %}
    
    suspend fun {{ api_call.function_name }}(
        {% if api_call.headers %}
        {% for header in api_call.headers %}
        {{ header.name|lower|replace('-', '_') }}: String{{ "," if not loop.last }}
        {% endfor %}
        {% if api_call.payload %},
        payload: {{ api_call.payload_type }}
        {% endif %}
        {% else %}
        {% if api_call.payload %}
        payload: {{ api_call.payload_type }}
        {% endif %}
        {% endif %}
    ): {{ api_call.response_type }}? {
        return try {
            val response = apiService.{{ api_call.function_name }}(
                {% if api_call.headers %}
                {% for header in api_call.headers %}
                {{ header.name|lower|replace('-', '_') }}{{ "," if not loop.last }}
                {% endfor %}
                {% if api_call.payload %},
                payload
                {% endif %}
                {% else %}
                {% if api_call.payload %}
                payload
                {% endif %}
                {% endif %}
            )
            if (response.isSuccessful) {
                response.body()
            } else {
                null // Handle error appropriately
            }
        } catch (e: Exception) {
            null // Handle network errors
        }
    }
    {% endfor %}
}