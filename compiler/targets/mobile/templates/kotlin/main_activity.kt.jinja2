package {{ package_name }}

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
{% if has_camera %}
import android.Manifest
import android.content.pm.PackageManager
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
{% endif %}
{% if has_location %}
import android.location.LocationManager
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
{% endif %}

class MainActivity : AppCompatActivity() {
    {% if has_location %}
    private lateinit var fusedLocationClient: FusedLocationProviderClient
    {% endif %}
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        {% if layouts %}
        setContentView(R.layout.{{ layouts[0].name | snakecase }})
        {% else %}
        setContentView(R.layout.activity_main)
        {% endif %}
        
        {% if has_location %}
        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        {% endif %}
        
        {% if permissions %}
        checkPermissions()
        {% endif %}
        
        initializeComponents()
    }
    
    private fun initializeComponents() {
        {% for component in components %}
        {% if component.type == 'button' %}
        findViewById<Button>(R.id.{{ component.id | default('button_' + loop.index0|string) }}).setOnClickListener {
            {% if component.mobile_type == 'camera' %}
            openCamera()
            {% elif component.mobile_type == 'location' %}
            getCurrentLocation()
            {% elif component.mobile_type == 'notification' %}
            showNotification()
            {% elif component.action %}
            {{ component.action }}()
            {% endif %}
        }
        {% endif %}
        {% endfor %}
    }
    
    {% if permissions %}
    private fun checkPermissions() {
        val permissions = mutableListOf<String>()
        {% if 'camera' in permissions %}
        permissions.add(Manifest.permission.CAMERA)
        {% endif %}
        {% if 'location' in permissions %}
        permissions.add(Manifest.permission.ACCESS_FINE_LOCATION)
        permissions.add(Manifest.permission.ACCESS_COARSE_LOCATION)
        {% endif %}
        {% if 'storage' in permissions %}
        permissions.add(Manifest.permission.READ_EXTERNAL_STORAGE)
        permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE)
        {% endif %}
        {% if 'contacts' in permissions %}
        permissions.add(Manifest.permission.READ_CONTACTS)
        {% endif %}
        
        val notGranted = permissions.filter {
            ContextCompat.checkSelfPermission(this, it) != PackageManager.PERMISSION_GRANTED
        }
        
        if (notGranted.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, notGranted.toTypedArray(), PERMISSION_REQUEST_CODE)
        }
    }
    {% endif %}
    
    {% if has_camera %}
    private fun openCamera() {
        // Camera implementation
        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        startActivityForResult(intent, CAMERA_REQUEST_CODE)
    }
    {% endif %}
    
    {% if has_location %}
    private fun getCurrentLocation() {
        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            fusedLocationClient.lastLocation.addOnSuccessListener { location ->
                location?.let {
                    // Handle location: ${it.latitude}, ${it.longitude}
                }
            }
        }
    }
    {% endif %}
    
    {% if has_notifications %}
    private fun showNotification() {
        // Notification implementation
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        // Create and show notification
    }
    {% endif %}
    
    companion object {
        private const val PERMISSION_REQUEST_CODE = 100
        {% if has_camera %}
        private const val CAMERA_REQUEST_CODE = 101
        {% endif %}
    }
}