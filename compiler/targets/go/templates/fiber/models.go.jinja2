package main

import (
	"time"
	"gorm.io/gorm"
	"github.com/google/uuid"
)

{% for data in data_definitions %}
// {{ data.name }} model
type {{ data.name }} struct {
{% for field in data.fields %}
{% if field.name == 'id' %}
	ID string `gorm:"type:uuid;primary_key;default:gen_random_uuid()" json:"id"`
{% elif field.type == 'text' or field.type == 'string' %}
	{{ field.name | title }} string `gorm:"type:varchar(255){% if field.required %};not null{% endif %}" json:"{{ field.name }}"`
{% elif field.type == 'number' or field.type == 'int' %}
	{{ field.name | title }} int `gorm:"{% if field.required %}not null{% endif %}" json:"{{ field.name }}"`
{% elif field.type == 'decimal' %}
	{{ field.name | title }} float64 `gorm:"type:decimal(10,2){% if field.required %};not null{% endif %}" json:"{{ field.name }}"`
{% elif field.type == 'flag' or field.type == 'boolean' %}
	{{ field.name | title }} bool `gorm:"{% if field.required %}not null{% endif %}" json:"{{ field.name }}"`
{% elif field.type == 'date' %}
	{{ field.name | title }} time.Time `gorm:"{% if field.required %}not null{% endif %}" json:"{{ field.name }}"`
{% else %}
	{{ field.name | title }} string `gorm:"{% if field.required %}not null{% endif %}" json:"{{ field.name }}"`
{% endif %}
{% endfor %}
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	DeletedAt gorm.DeletedAt `gorm:"index" json:"-"`
}

// TableName returns the table name for {{ data.name }}
func ({{ data.name }}) TableName() string {
	return "{{ data.name.lower() }}s"
}

// BeforeCreate hook for {{ data.name }}
func ({{ data.name[0].lower() }} *{{ data.name }}) BeforeCreate(tx *gorm.DB) error {
	if {{ data.name[0].lower() }}.ID == "" {
		{{ data.name[0].lower() }}.ID = uuid.New().String()
	}
	return nil
}

{% endfor %}