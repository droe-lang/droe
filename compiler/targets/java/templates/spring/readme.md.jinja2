# {{ project_name }}

{{ project_description | default('Spring Boot application generated from Roelang DSL') }}

## Overview

This Spring Boot application was automatically generated from Roelang DSL code. It provides RESTful APIs with JPA database integration.

## Features

- **Spring Boot {{ spring_boot_version | default('3.1.5') }}** - Modern Java framework
- **Spring Data JPA** - Database abstraction layer
- **RESTful APIs** - Complete CRUD operations
- **{% if database == 'h2' or not database %}H2 Database{% elif database == 'mysql' %}MySQL{% elif database == 'postgresql' %}PostgreSQL{% endif %}** - Data persistence
{% if enable_actuator %}
- **Spring Boot Actuator** - Health checks and metrics
{% endif %}

## Quick Start

### Prerequisites

- Java {{ java_version | default('17') }} or higher
- Maven 3.6 or higher
{% if database == 'mysql' %}
- MySQL 8.0 or higher
{% elif database == 'postgresql' %}
- PostgreSQL 12 or higher
{% endif %}

### Running the Application

1. **Clone and navigate to the project:**
   ```bash
   cd {{ artifact_id }}
   ```

2. **Build the application:**
   ```bash
   mvn clean compile
   ```

3. **Run the application:**
   ```bash
   mvn spring-boot:run
   ```

4. **Access the application:**
   - Main application: http://localhost:{{ server_port | default(8080) }}
   {% if database == 'h2' or not database %}
   - H2 Console: http://localhost:{{ server_port | default(8080) }}/h2-console
   {% endif %}

## API Endpoints

{% for entity in entities %}
### {{ entity.name }} API

- `GET /api/{{ entity.name | lower }}s` - Get all {{ entity.name | lower }}s
- `GET /api/{{ entity.name | lower }}s/{id}` - Get {{ entity.name | lower }} by ID
- `POST /api/{{ entity.name | lower }}s` - Create new {{ entity.name | lower }}
- `PUT /api/{{ entity.name | lower }}s/{id}` - Update {{ entity.name | lower }}
- `DELETE /api/{{ entity.name | lower }}s/{id}` - Delete {{ entity.name | lower }}
{% if entity.has_name_field %}
- `GET /api/{{ entity.name | lower }}s/search?name={name}` - Search by name
- `GET /api/{{ entity.name | lower }}s/by-name/{name}` - Get by exact name
{% endif %}

#### Example Request Body:
```json
{
  {% for field in entity.fields %}
  "{{ field.name }}": {% if field.java_type == 'String' %}"example value"{% elif field.java_type == 'Integer' or field.java_type == 'Long' %}123{% elif field.java_type == 'Boolean' %}true{% elif field.java_type == 'BigDecimal' %}99.99{% else %}null{% endif %}{% if not loop.last %},{% endif %}
  {% endfor %}
}
```

{% endfor %}

## Database Configuration

{% if database == 'h2' or not database %}
### H2 Database (Development)

The application uses an in-memory H2 database by default:

- **URL:** `jdbc:h2:mem:{{ app_name | lower }}db`
- **Username:** `sa`
- **Password:** _(empty)_
- **Console:** http://localhost:{{ server_port | default(8080) }}/h2-console

{% elif database == 'mysql' %}
### MySQL Configuration

Update `application.properties` with your MySQL settings:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/{{ app_name | lower }}db
spring.datasource.username=your_username
spring.datasource.password=your_password
```

Create the database:
```sql
CREATE DATABASE {{ app_name | lower }}db;
```

{% elif database == 'postgresql' %}
### PostgreSQL Configuration

Update `application.properties` with your PostgreSQL settings:

```properties
spring.datasource.url=jdbc:postgresql://localhost:5432/{{ app_name | lower }}db
spring.datasource.username=your_username
spring.datasource.password=your_password
```

Create the database:
```sql
CREATE DATABASE {{ app_name | lower }}db;
```
{% endif %}

## Development

### Project Structure

```
src/
├── main/
│   ├── java/
│   │   └── {{ package_name | replace('.', '/') }}/
│   │       ├── {{ app_name }}Application.java        # Main application class
│   │       ├── entity/                               # JPA entities
│   │       ├── repository/                           # Data repositories
│   │       ├── service/                             # Business logic
│   │       └── controller/                          # REST controllers
│   └── resources/
│       └── application.properties                   # Configuration
└── test/                                           # Unit tests
```

### Building

```bash
# Compile
mvn compile

# Run tests
mvn test

# Package
mvn package

# Clean build
mvn clean package
```

### Configuration

Key configuration files:

- `pom.xml` - Maven dependencies and build configuration
- `src/main/resources/application.properties` - Application settings
- Generated from Roelang DSL on {{ generation_date }}

## API Testing

### Using curl

{% for entity in entities %}
```bash
# Get all {{ entity.name | lower }}s
curl http://localhost:{{ server_port | default(8080) }}/api/{{ entity.name | lower }}s

# Create a new {{ entity.name | lower }}
curl -X POST http://localhost:{{ server_port | default(8080) }}/api/{{ entity.name | lower }}s \
  -H "Content-Type: application/json" \
  -d '{{ '{' }}{% for field in entity.fields %}"{{ field.name }}": {% if field.java_type == 'String' %}"example"{% elif field.java_type == 'Integer' or field.java_type == 'Long' %}1{% elif field.java_type == 'Boolean' %}true{% elif field.java_type == 'BigDecimal' %}9.99{% else %}null{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}{{ '}' }}'

# Get {{ entity.name | lower }} by ID
curl http://localhost:{{ server_port | default(8080) }}/api/{{ entity.name | lower }}s/1
```

{% endfor %}

## Generated Components

{% for entity in entities %}
- **{{ entity.name }}** entity with {{ entity.fields | length }} fields
- **{{ entity.name }}Repository** for data access
- **{{ entity.name }}Service** for business logic
- **{{ entity.name }}Controller** for REST endpoints
{% endfor %}

---

*This application was generated by the Roelang compiler with Spring Boot framework support.*