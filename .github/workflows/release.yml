name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

jobs:
  build-release:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: droe-linux-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: droe-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: droe-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: droe-windows-x64.exe
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Cache cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build unified binary
      run: |
        cargo build --release --target ${{ matrix.target }}
        echo "✅ Unified droe binary built for ${{ matrix.target }}"
    
    - name: Prepare artifact
      shell: bash
      run: |
        mkdir -p release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/droe.exe release/${{ matrix.artifact_name }}
        else
          cp target/${{ matrix.target }}/release/droe release/${{ matrix.artifact_name }}
        fi
        echo "✅ Artifact prepared: ${{ matrix.artifact_name }}"
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: release/${{ matrix.artifact_name }}
        retention-days: 7

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts
    
    - name: Prepare release files
      run: |
        mkdir -p release
        # Move all artifacts to release directory
        find release-artifacts -name "droe-*" -type f -exec cp {} release/ \;
        
        # Generate checksums
        cd release
        for file in droe-*; do
          sha256sum "$file" > "$file.sha256"
        done
        echo "✅ Release files prepared:"
        ls -lh
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Droe Language ${{ steps.version.outputs.version }}
        body: |
          # Droe Language ${{ steps.version.outputs.version }}
          
          ## What's New
          Unified binary architecture with all components built into a single executable:
          - 🛠️ CLI tools (init, compile, run, build)
          - 🚀 WebAssembly VM runtime
          - 🔌 Language Server Protocol (LSP)
          - 🤖 LLM integration with gRPC server
          - 📦 Code generation for multiple targets
          
          ## Installation
          
          ### Quick Install (macOS/Linux)
          ```bash
          curl -sSL https://droe.dev/install | sh
          ```
          
          ### Manual Installation
          1. Download the appropriate binary for your platform
          2. Make it executable: `chmod +x droe-*`
          3. Move to PATH: `sudo mv droe-* /usr/local/bin/droe`
          
          ## Platform Support
          - **Linux x64**: `droe-linux-x64`
          - **macOS x64**: `droe-macos-x64` 
          - **macOS ARM64**: `droe-macos-arm64`
          - **Windows x64**: `droe-windows-x64.exe`
          
          ## Quick Start
          ```bash
          droe --version
          droe init my-project
          echo 'display "Hello, Droe!"' > hello.droe
          droe run hello.droe
          ```
          
          ## Checksums
          SHA256 checksums are provided for all downloads.
          
          ---
          Generated from commit: ${{ github.sha }}
        files: |
          release/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}